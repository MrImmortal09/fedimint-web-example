import { BalanceService, MintService, LightningService, FederationService, RecoveryService } from './services';
import { type LogLevel } from './utils/logger';
import { JSONValue } from './types';
export declare class FedimintWallet {
    private _client;
    balance: BalanceService;
    mint: MintService;
    lightning: LightningService;
    federation: FederationService;
    recovery: RecoveryService;
    private _openPromise;
    private _resolveOpen;
    private _isOpen;
    /**
     * Creates a new instance of FedimintWallet.
     *
     * This constructor initializes a FedimintWallet instance, which manages communication
     * with a Web Worker. The Web Worker is responsible for running WebAssembly code that
     * handles the core Fedimint Client operations.
     *
     * (default) When not in lazy mode, the constructor immediately initializes the
     * Web Worker and begins loading the WebAssembly module in the background. This
     * allows for faster subsequent operations but may increase initial load time.
     *
     * In lazy mode, the Web Worker and WebAssembly initialization are deferred until
     * the first operation that requires them, reducing initial overhead at the cost
     * of a slight delay on the first operation.
     *
     * @param {boolean} lazy - If true, delays Web Worker and WebAssembly initialization
     *                         until needed. Default is false.
     *
     * @example
     * // Create a wallet with immediate initialization
     * const wallet = new FedimintWallet();
     * wallet.open();
     *
     * // Create a wallet with lazy initialization
     * const lazyWallet = new FedimintWallet(true);
     * // Some time later...
     * lazyWallet.initialize();
     * lazyWallet.open();
     */
    constructor(lazy?: boolean);
    initialize(): Promise<void>;
    waitForOpen(): Promise<void>;
    open(clientName?: string): Promise<boolean>;
    joinFederation(inviteCode: string, clientName?: string): Promise<boolean>;
    /**
     * This should ONLY be called when UNLOADING the wallet client.
     * After this call, the FedimintWallet instance should be discarded.
     */
    cleanup(): Promise<void>;
    isOpen(): boolean;
    /**
     * Sets the log level for the library.
     * @param level The desired log level ('DEBUG', 'INFO', 'WARN', 'ERROR', 'NONE').
     */
    setLogLevel(level: LogLevel): void;
    /**
     * Parses a federation invite code and retrieves its details.
     *
     * This method sends the provided invite code to the WorkerClient for parsing.
     * The response includes the federation_id and url.
     *
     * @param {string} inviteCode - The invite code to be parsed.
     * @returns {Promise<{ federation_id: string, url: string}>}
     *          A promise that resolves to an object containing:
     *          - `federation_id`: The id of the feder.
     *          - `url`: One of the apipoints to connect to the federation
     *
     * @throws {Error} If the WorkerClient encounters an issue during the parsing process.
     *
     * @example
     * const inviteCode = "example-invite-code";
     * const parsedCode = await wallet.parseInviteCode(inviteCode);
     * console.log(parsedCode.federation_id, parsedCode.url);
     */
    parseInviteCode(inviteCode: string): Promise<{
        type: string;
        data: JSONValue;
        requestId: number;
    }>;
    /**
     * Parses a BOLT11 Lightning invoice and retrieves its details.
     *
     * This method sends the provided invoice string to the WorkerClient for parsing.
     * The response includes details such as the amount, expiry, and memo.
     *
     * @param {string} invoiceStr - The BOLT11 invoice string to be parsed.
     * @returns {Promise<{ amount: string, expiry: number, memo: string }>}
     *          A promise that resolves to an object containing:
     *          - `amount`: The amount specified in the invoice.
     *          - `expiry`: The expiry time of the invoice in seconds.
     *          - `memo`: A description or memo attached to the invoice.
     *
     * @throws {Error} If the WorkerClient encounters an issue during the parsing process.
     *
     * @example
     * const invoiceStr = "lnbc1...";
     * const parsedInvoice = await wallet.parseBolt11Invoice(invoiceStr);
     * console.log(parsedInvoice.amount, parsedInvoice.expiry, parsedInvoice.memo);
     */
    parseBolt11Invoice(invoiceStr: string): Promise<{
        type: string;
        data: JSONValue;
        requestId: number;
    }>;
}
//# sourceMappingURL=FedimintWallet.d.ts.map